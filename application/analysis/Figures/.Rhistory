simdat$WBC2=sqrt(simdat$WBC2)
simdat$RBC2=sqrt(simdat$RBC2)
simdat$PLATE2=sqrt(simdat$PLATE2)
simdat$LEU3N3=sqrt(simdat$LEU3N3)
simdat$LEU2N3=sqrt(simdat$LEU2N3)
simdat$WBC3=sqrt(simdat$WBC3)
simdat$RBC3=sqrt(simdat$RBC3)
simdat$PLATE3=sqrt(simdat$PLATE3)
simdat$LEU3N4=sqrt(simdat$LEU3N4)
simdat$LEU2N4=sqrt(simdat$LEU2N4)
simdat$WBC4=sqrt(simdat$WBC4)
simdat$RBC4=sqrt(simdat$RBC4)
simdat$PLATE4=sqrt(simdat$PLATE4)
simdat$LEU3N5=sqrt(simdat$LEU3N5)
simdat$LEU2N5=sqrt(simdat$LEU2N5)
simdat$WBC5=sqrt(simdat$WBC5)
simdat$RBC5=sqrt(simdat$RBC5)
simdat$PLATE5=sqrt(simdat$PLATE5)
dim(simdat)
sum(is.na(simdat$LEU3N1))
sum(is.na(simdat$PLATE1))
sum(is.na(simdat$WBC1))
sum(is.na(simdat$RBC1))
sum(is.na(simdat$RBC2))
sum(is.na(simdat$LEU3N2))
######for our analysis, we looked only the complete data for each 3-visit window, avoid dealing with lost to followup/death topic of future research
simdatFit=simdat[which(!is.na(simdat$LEU3N1) & !is.na(simdat$LEU2N1) & !is.na(simdat$WBC1) &
!is.na(simdat$RBC1) & !is.na(simdat$PLATE1) & !is.na(simdat$A1) &
!is.na(simdat$LEU3N2) & !is.na(simdat$LEU2N2) & !is.na(simdat$WBC2) &
!is.na(simdat$RBC2) & !is.na(simdat$PLATE2) &
!is.na(simdat$LEU3N3) & !is.na(simdat$LEU2N3) & !is.na(simdat$WBC3) &
!is.na(simdat$RBC3) & !is.na(simdat$PLATE3) &
!is.na(simdat$LEU3N4) & !is.na(simdat$LEU2N4) & !is.na(simdat$WBC4) &
!is.na(simdat$RBC4) & !is.na(simdat$PLATE4) &
!is.na(simdat$LEU3N5) & !is.na(simdat$LEU2N5) & !is.na(simdat$WBC5) &
!is.na(simdat$RBC5) & !is.na(simdat$PLATE5) &
!is.na(simdat$A1)  & !is.na(simdat$A2) & !is.na(simdat$A3)  & !is.na(simdat$A4) & !is.na(simdat$white)
& !is.na(simdat$college) & !is.na(simdat$age)),]
dim(simdatFit)
sampleSize=nrow(simdatFit)
simdat$A1=as.factor(simdat$A1)
simdat$A2=as.factor(simdat$A2)
simdat$A3=as.factor(simdat$A3)
simdat$A4=as.factor(simdat$A4)
simdat$white=as.factor(simdat$white)
simdat$college=as.factor(simdat$college)
#simdatFit$A0=as.factor(simdatFit$A0)
simdatFit$id2=1:dim(simdatFit)[1]
simdatFit$id=1
sum(simdatFit$A4==1)
sum(simdatFit$A4==0)
mean(simdatFit$LEU3N2[(simdatFit$A4==1)], na.rm=T)
mean(simdatFit$LEU3N2[(simdatFit$A4==0)], na.rm=T)
varList=NULL
############################################
if(k==7){
varList = c(paste0("LEU3N", 1:4), paste0("LEU2N", 1:4), paste0("WBC", 1:4), paste0("RBC", 1:4), paste0("PLATE", 1:4),
"age", "white", "college")
outcomeVarList0=c("LEU3N4", "LEU3N3", "I(LEU3N4^2)", "I(LEU3N3^2)"  )
outcomeVarList1=c("LEU3N4", "LEU3N3", "I(LEU3N4^2)", "I(LEU3N3^2)"  )
propenVarList=varList
} else if(k==8){
varList = c(paste0("LEU3N", 1:4), paste0("LEU2N", 1:4), paste0("WBC", 1:4), paste0("RBC", 1:4), paste0("PLATE", 1:4),
"age", "white", "college", paste0("A", 3))
outcomeVarList0=c("LEU3N4", "LEU3N3", "I(LEU3N4^2)", "I(LEU3N3^2)"  )
outcomeVarList1=c("LEU3N4", "LEU3N3", "I(LEU3N4^2)", "I(LEU3N3^2)"  )
propenVarList=varList
} else if(k==9){
varList = c(paste0("LEU3N", 1:4), paste0("LEU2N", 1:4), paste0("WBC", 1:4), paste0("RBC", 1:4), paste0("PLATE", 1:4),
"age", "white", "college", paste0("A", c(2,3)))
outcomeVarList0=c("LEU3N4", "LEU3N3", "I(LEU3N4^2)", "I(LEU3N3^2)"  )
outcomeVarList1=c("LEU3N4", "LEU3N3", "I(LEU3N4^2)", "I(LEU3N3^2)"  )
propenVarList=varList
} else if (k>=10){
varList = c(paste0("LEU3N", 1:4), paste0("LEU2N", 1:4), paste0("WBC", 1:4), paste0("RBC", 1:4), paste0("PLATE", 1:4),
"age", "white", "college", paste0("A", 1:3))
outcomeVarList0=c("LEU3N4", "LEU3N3", "I(LEU3N4^2)", "I(LEU3N3^2)"  )
outcomeVarList1=c("LEU3N4", "LEU3N3", "I(LEU3N4^2)", "I(LEU3N3^2)"  )
propenVarList=varList
}
treat.varname="A4"
outcome.varname="LEU3N5"
cutoffLevel=c(0.01, 0.02)  ##cutoff alpha level
splineTerm="s(pslogit, bs=\"ps\", k=15)"  ###
treat.varname="A4"
outcome.varname="LEU3N5"
cutoffLevel=c(0.01, 0.02)  ##cutoff alpha level
output = stdMeanDiff(data=simdatFit, propenVarList, treat.varname, outcome.varname, varList=varList)
#not stablized weights
weightSum[k,] = output$weightSum ###summary of the unstablized and stablized weights
#################################################################################################
#########propensity score distributions##########################################################
####looking of probability of getting treated for both control and treated groups
probTreat = output$propTreat
overlapTreat=c(min(probTreat[which(simdatFit[, treat.varname]==1)]), max(probTreat[which(simdatFit[, treat.varname]==1)]))
# the input of the following function MUST be a numeric list
#plot(density(probTreat[simdatFit[, treat.varname]==0], from=0,
#             to=1), lty=1, lwd=2, col="black", xlab="Propensity Score", main=paste0("visit", k))
#lines(density(probTreat[simdatFit[, treat.varname]==1],from=0, to=1), lty=2, lwd=2, col="red")
#legend("topright", c("control","treated"), cex=1.2, lty=1:2, col=c("black", "red"))
hist(probTreat[simdatFit[, treat.varname]==0], xlim=c(0,1),col=rgb(0,0,1,1/4), main=paste0("visit", k))
hist(probTreat[simdatFit[, treat.varname]==1], add=T, col=rgb(1,0,0,1/4) )
#######proportion of treated that is inside the 5% and 95% quantile of propensity score distribution of the control
cutoff=quantile(probTreat[simdatFit[, treat.varname]==0], probs = c(0.05, 0.95))
prop1=(sum(probTreat[simdatFit[, treat.varname]==1] >= cutoff[1]  & probTreat[simdatFit[, treat.varname]==1] <= cutoff[2]))/sum(simdatFit[, treat.varname]==1)
#######proportion of treated that is inside the 5% and 95% quantile of propensity score distribution of the treated
cutoff=quantile(probTreat[simdatFit[, treat.varname]==1], probs = c(0.05, 0.95))
prop0=(sum(probTreat[simdatFit[, treat.varname]==0] >= cutoff[1]  & probTreat[simdatFit[, treat.varname]==0] <= cutoff[2]))/sum(simdatFit[, treat.varname]==0)
#########vary the cutoff ATE for restricted population#######
sampleNum[k,]=c(sum(simdatFit[, treat.varname]==1), sum(simdatFit[, treat.varname]==0),
output$countTrimTreat[2], output$countTrimControl[2],
output$countTrimTreatQ[2], output$countTrimControlQ[2],
output$matchSize, prop1, prop0)  ###sample of treated and control at each visit
####standardized difference before and after controlling for propensity score
sumDiff=cbind(t(output$weightAll), t(output$pencompAll))
biasAll=cbind(rep("&", dim(sumDiff)[1]), sumDiff[,1], rep("&", dim(sumDiff)[1]), sumDiff[,2],
rep("&", dim(sumDiff)[1]), sumDiff[,3],
rep("&", dim(sumDiff)[1]), sumDiff[,4], rep("&", dim(sumDiff)[1]), sumDiff[,5], rep("&", dim(sumDiff)[1]), sumDiff[,6],
rep("&", dim(sumDiff)[1]), sumDiff[,7], rep("&", dim(sumDiff)[1]), sumDiff[,8], rep("&", dim(sumDiff)[1]), sumDiff[,9],
rep("&", dim(sumDiff)[1]), sumDiff[,10], rep("&", dim(sumDiff)[1]), sumDiff[,11],
rep("\\\\", dim(sumDiff)[1]))
write.table(biasAll, paste0(DIREC, "version2c/Results/visit", k, ".txt"),
sep="\t", quote=F, col.names=F, row.names = F)
write.table(sumDiff, paste0(DIREC, "version2c/Results/visit", k, "numericVersion.txt"),
sep="\t", quote=F, col.names=F, row.names = T)
}
dev.off()
##########################################
####samples of treated and control after matching, truncation
sampleNum=sampleNum[7:21, ]
biasAll=cbind(rep("&", dim(sampleNum)[1]), sampleNum[,1], rep("&", dim(sampleNum)[1]), sampleNum[,2],
rep("&", dim(sampleNum)[1]), sampleNum[,3],
rep("&", dim(sampleNum)[1]), sampleNum[,4],
rep("&", dim(sampleNum)[1]), sampleNum[,5],
rep("&", dim(sampleNum)[1]), sampleNum[,6],
rep("&", dim(sampleNum)[1]), sampleNum[,7],
rep("&", dim(sampleNum)[1]), sampleNum[,8],
rep("&", dim(sampleNum)[1]), format(sampleNum[,9], digits=1),
rep("&", dim(sampleNum)[1]), format(sampleNum[,10], digits=1),
rep("\\\\", dim(sampleNum)[1]))
biasAll=cbind(c(paste0("visit ", 7:21)), biasAll)
write.table(biasAll, paste0(DIREC, "version2c/Results/sampleSize.txt"), sep="\t", row.names = F, quote = F)
#####################################################
weightSum=weightSum[7:21,]
weightSum=format(weightSum, digits=2)
biasAll=cbind(rep("&", dim(weightSum)[1]), weightSum[,1], rep("&", dim(weightSum)[1]), weightSum[,2],
rep("&", dim(weightSum)[1]), weightSum[,3],
rep("&", dim(weightSum)[1]), weightSum[,4],
rep("&", dim(weightSum)[1]), weightSum[,5],
rep("&", dim(weightSum)[1]), weightSum[,6],
rep("&", dim(weightSum)[1]), weightSum[,7],
rep("&", dim(weightSum)[1]), weightSum[,8],
rep("\\\\", dim(weightSum)[1]))
biasAll=cbind(c(paste0("visit ", 7:21)), biasAll)
write.table(biasAll, paste0(DIREC, "version2c/Results/summaryWeight.txt"), sep="\t", row.names = F,
col.names = F, quote = F)
########created 7/21/2018
rm(list=ls())
times=c(12)
modelTypeVal=c("lassoOutcome", "lassoSep", "lassoStepwiseT", "lassoStepwiseY",  "allPotent")
############
DIRECRoot="M:/Private/overlap/Application/version4/"
DIREC=paste0(DIRECRoot, "Results/")
result=NULL
for(way in c( "iptw_","aiptw_", "pencomp_") ){
lassoOutcome=NULL
lassoOutcome=read.table(paste(DIREC, way, "lassoOutcome.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoOutcome=lassoOutcome[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoOutcome=lassoOutcome[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoSep=read.table(paste(DIREC, way, "lasso.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoSep=lassoSep[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoSep=lassoSep[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoStepwiseT=read.table(paste(DIREC, way, "lassoStepT.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoStepwiseT=lassoStepwiseT[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoStepwiseT=lassoStepwiseT[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoStepwiseY=read.table(paste(DIREC, way, "lassoStepY.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoStepwiseY=lassoStepwiseY[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoStepwiseY=lassoStepwiseY[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
allPotent=read.table(paste(DIREC, way, "allPotent.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
allPotent=allPotent[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
allPotent=allPotent[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
stepwise=read.table(paste(DIREC, way, "stepwise.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
stepwise=stepwise[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
stepwise=stepwise[times, c((1:4)+4*0, (1:4)+4*1) ]
}
temp=rbind(c("&", paste0(format(allPotent[1,1], digit=2)," (", format(allPotent[1,3], digit=2), ", ", format(allPotent[1,4], digit=2), ")")),
c("&", paste0(format(allPotent[1,5], digit=2)," (", format(allPotent[1,7], digit=2), ", ", format(allPotent[1,8], digit=2), ")")),
c("&", paste0(format(stepwise[1,1], digit=2)," (", format(stepwise[1,3], digit=2), ", ", format(stepwise[1,4], digit=2), ")")),
c("&", paste0(format(stepwise[1,5], digit=2)," (", format(stepwise[1,7], digit=2), ", ", format(stepwise[1,8], digit=2), ")")),
c("&", paste0(format(lassoSep[1,1], digit=2)," (", format(lassoSep[1,3], digit=2), ", ", format(lassoSep[1,4], digit=2), ")")),
c("&", paste0(format(lassoSep[1,5], digit=2)," (", format(lassoSep[1,7], digit=2), ", ", format(lassoSep[1,8], digit=2), ")")),
c("&", paste0(format(lassoOutcome[1,1], digit=2)," (", format(lassoOutcome[1,3], digit=2), ", ", format(lassoOutcome[1,4], digit=2), ")")),
c("&", paste0(format(lassoOutcome[1,5], digit=2)," (", format(lassoOutcome[1,7], digit=2), ", ", format(lassoOutcome[1,8], digit=2), ")")),
c("&", paste0(format(lassoStepwiseT[1,1], digit=2)," (", format(lassoStepwiseT[1,3], digit=2), ", ", format(lassoStepwiseT[1,4], digit=2), ")")),
c("&", paste0(format(lassoStepwiseT[1,5], digit=2)," (", format(lassoStepwiseT[1,7], digit=2), ", ", format(lassoStepwiseT[1,8], digit=2), ")")),
c("&", paste0(format(lassoStepwiseY[1,1], digit=2)," (", format(lassoStepwiseY[1,3], digit=2), ", ", format(lassoStepwiseY[1,4], digit=2), ")")),
c("&", paste0(format(lassoStepwiseY[1,5], digit=2)," (", format(lassoStepwiseY[1,7], digit=2), ", ", format(lassoStepwiseY[1,8], digit=2), ")")) )
result=cbind(result, temp)
}
result
paste0(format(allPotent[1,1], digit=2, nsmall=1)
)
format(0.001, digit=2, nsmall=1)
format(0.001, nsmall=1)
format(1, nsmall=1)
format(1.007, nsmall=1)
format(1.007, digits=2, nsmall=1)
########created 7/21/2018
rm(list=ls())
times=c(12)
modelTypeVal=c("lassoOutcome", "lassoSep", "lassoStepwiseT", "lassoStepwiseY",  "allPotent")
############
DIRECRoot="M:/Private/overlap/Application/version4/"
DIREC=paste0(DIRECRoot, "Results/")
result=NULL
for(way in c( "iptw_","aiptw_", "pencomp_") ){
lassoOutcome=NULL
lassoOutcome=read.table(paste(DIREC, way, "lassoOutcome.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoOutcome=lassoOutcome[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoOutcome=lassoOutcome[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoSep=read.table(paste(DIREC, way, "lasso.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoSep=lassoSep[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoSep=lassoSep[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoStepwiseT=read.table(paste(DIREC, way, "lassoStepT.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoStepwiseT=lassoStepwiseT[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoStepwiseT=lassoStepwiseT[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoStepwiseY=read.table(paste(DIREC, way, "lassoStepY.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoStepwiseY=lassoStepwiseY[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoStepwiseY=lassoStepwiseY[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
allPotent=read.table(paste(DIREC, way, "allPotent.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
allPotent=allPotent[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
allPotent=allPotent[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
stepwise=read.table(paste(DIREC, way, "stepwise.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
stepwise=stepwise[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
stepwise=stepwise[times, c((1:4)+4*0, (1:4)+4*1) ]
}
temp=rbind(c("&", paste0(format(allPotent[1,1], digits=2, nsmall=1)," (", format(allPotent[1,3], digits=2, nsmall=1), ", ", format(allPotent[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(allPotent[1,5], digits=2, nsmall=1)," (", format(allPotent[1,7], digits=2, nsmall=1), ", ", format(allPotent[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(stepwise[1,1], digits=2, nsmall=1)," (", format(stepwise[1,3], digits=2, nsmall=1), ", ", format(stepwise[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(stepwise[1,5], digits=2, nsmall=1)," (", format(stepwise[1,7], digits=2, nsmall=1), ", ", format(stepwise[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoSep[1,1], digits=2, nsmall=1)," (", format(lassoSep[1,3], digits=2, nsmall=1), ", ", format(lassoSep[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoSep[1,5], digits=2, nsmall=1)," (", format(lassoSep[1,7], digits=2, nsmall=1), ", ", format(lassoSep[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoOutcome[1,1], digits=2, nsmall=1)," (", format(lassoOutcome[1,3], digits=2, nsmall=1), ", ", format(lassoOutcome[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoOutcome[1,5], digits=2, nsmall=1)," (", format(lassoOutcome[1,7], digits=2, nsmall=1), ", ", format(lassoOutcome[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseT[1,1], digits=2, nsmall=1)," (", format(lassoStepwiseT[1,3], digits=2, nsmall=1), ", ", format(lassoStepwiseT[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseT[1,5], digits=2, nsmall=1)," (", format(lassoStepwiseT[1,7], digits=2, nsmall=1), ", ", format(lassoStepwiseT[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseY[1,1], digits=2, nsmall=1)," (", format(lassoStepwiseY[1,3], digits=2, nsmall=1), ", ", format(lassoStepwiseY[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseY[1,5], digits=2, nsmall=1)," (", format(lassoStepwiseY[1,7], digits=2, nsmall=1), ", ", format(lassoStepwiseY[1,8], digits=2, nsmall=1), ")")) )
result=cbind(result, temp)
}
biasAll=NULL
biasAll=cbind(result, "\\\\")
biasAll=cbind(c(rep(c("Rubin/standard ", "Bagging "), 6)), biasAll)
biasAll=cbind(c("allPotent","", "SW","", "AL","", "OAL","", "Step-ALT","", "Step-ALY", ""), rep("&", nrow(result)), biasAll)
write.table(biasAll, paste(DIRECRoot, "Figures/Paper_Table.txt",sep=""),  quote=F, col.names=F, row.names = F, sep="\t")
########created 7/21/2018
rm(list=ls())
times=c(12)
modelTypeVal=c("lassoOutcome", "lassoSep", "lassoStepwiseT", "lassoStepwiseY",  "allPotent")
############
DIRECRoot="M:/Private/overlap/Application/version4/"
DIREC=paste0(DIRECRoot, "Results/")
result=NULL
for(way in c( "iptw_","aiptw_", "pencomp_") ){
lassoOutcome=NULL
lassoOutcome=read.table(paste(DIREC, way, "lassoOutcome.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoOutcome=lassoOutcome[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoOutcome=lassoOutcome[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoSep=read.table(paste(DIREC, way, "lasso.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoSep=lassoSep[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoSep=lassoSep[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoStepwiseT=read.table(paste(DIREC, way, "lassoStepT.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoStepwiseT=lassoStepwiseT[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoStepwiseT=lassoStepwiseT[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoStepwiseY=read.table(paste(DIREC, way, "lassoStepY.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoStepwiseY=lassoStepwiseY[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoStepwiseY=lassoStepwiseY[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
allPotent=read.table(paste(DIREC, way, "allPotent.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
allPotent=allPotent[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
allPotent=allPotent[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
stepwise=read.table(paste(DIREC, way, "stepwise.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
stepwise=stepwise[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
stepwise=stepwise[times, c((1:4)+4*0, (1:4)+4*1) ]
}
temp=rbind(c("&", paste0(format(allPotent[1,1], digits=2, nsmall=1)," (", format(allPotent[1,3], digits=2, nsmall=1), ", ", format(allPotent[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(allPotent[1,5], digits=2, nsmall=1)," (", format(allPotent[1,7], digits=2, nsmall=1), ", ", format(allPotent[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(stepwise[1,1], digits=2, nsmall=1)," (", format(stepwise[1,3], digits=2, nsmall=1), ", ", format(stepwise[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(stepwise[1,5], digits=2, nsmall=1)," (", format(stepwise[1,7], digits=2, nsmall=1), ", ", format(stepwise[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoSep[1,1], digits=2, nsmall=1)," (", format(lassoSep[1,3], digits=2, nsmall=1), ", ", format(lassoSep[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoSep[1,5], digits=2, nsmall=1)," (", format(lassoSep[1,7], digits=2, nsmall=1), ", ", format(lassoSep[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoOutcome[1,1], digits=2, nsmall=1)," (", format(lassoOutcome[1,3], digits=2, nsmall=1), ", ", format(lassoOutcome[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoOutcome[1,5], digits=2, nsmall=1)," (", format(lassoOutcome[1,7], digits=2, nsmall=1), ", ", format(lassoOutcome[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseT[1,1], digits=2, nsmall=1)," (", format(lassoStepwiseT[1,3], digits=2, nsmall=1), ", ", format(lassoStepwiseT[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseT[1,5], digits=2, nsmall=1)," (", format(lassoStepwiseT[1,7], digits=2, nsmall=1), ", ", format(lassoStepwiseT[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseY[1,1], digits=2, nsmall=1)," (", format(lassoStepwiseY[1,3], digits=2, nsmall=1), ", ", format(lassoStepwiseY[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseY[1,5], digits=2, nsmall=1)," (", format(lassoStepwiseY[1,7], digits=2, nsmall=1), ", ", format(lassoStepwiseY[1,8], digits=2, nsmall=1), ")")) )
result=cbind(result, temp)
}
result
rm(list=ls())
times=c(12)
modelTypeVal=c("lassoOutcome", "lassoSep", "lassoStepwiseT", "lassoStepwiseY",  "allPotent")
############
DIRECRoot="M:/Private/overlap/Application/version4/"
DIREC=paste0(DIRECRoot, "Results/")
result=NULL
way="iptw_"
lassoOutcome=NULL
lassoOutcome=read.table(paste(DIREC, way, "lassoOutcome.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoOutcome=lassoOutcome[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoOutcome=lassoOutcome[times, c((1:4)+4*0, (1:4)+4*1) ]
}
lassoOutcome
lassoOutcome=NULL
lassoOutcome=read.table(paste(DIREC, way, "lassoOutcome.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoOutcome=lassoOutcome[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoOutcome=lassoOutcome[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoSep=read.table(paste(DIREC, way, "lasso.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoSep=lassoSep[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoSep=lassoSep[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoStepwiseT=read.table(paste(DIREC, way, "lassoStepT.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoStepwiseT=lassoStepwiseT[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoStepwiseT=lassoStepwiseT[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoStepwiseY=read.table(paste(DIREC, way, "lassoStepY.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoStepwiseY=lassoStepwiseY[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoStepwiseY=lassoStepwiseY[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
allPotent=read.table(paste(DIREC, way, "allPotent.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
allPotent=allPotent[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
allPotent=allPotent[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
stepwise=read.table(paste(DIREC, way, "stepwise.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
stepwise=stepwise[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
stepwise=stepwise[times, c((1:4)+4*0, (1:4)+4*1) ]
}
temp=rbind(c("&", paste0(format(allPotent[1,1], digits=2, nsmall=1)," (", format(allPotent[1,3], digits=2, nsmall=1), ", ", format(allPotent[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(allPotent[1,5], digits=2, nsmall=1)," (", format(allPotent[1,7], digits=2, nsmall=1), ", ", format(allPotent[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(stepwise[1,1], digits=2, nsmall=1)," (", format(stepwise[1,3], digits=2, nsmall=1), ", ", format(stepwise[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(stepwise[1,5], digits=2, nsmall=1)," (", format(stepwise[1,7], digits=2, nsmall=1), ", ", format(stepwise[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoSep[1,1], digits=2, nsmall=1)," (", format(lassoSep[1,3], digits=2, nsmall=1), ", ", format(lassoSep[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoSep[1,5], digits=2, nsmall=1)," (", format(lassoSep[1,7], digits=2, nsmall=1), ", ", format(lassoSep[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoOutcome[1,1], digits=2, nsmall=1)," (", format(lassoOutcome[1,3], digits=2, nsmall=1), ", ", format(lassoOutcome[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoOutcome[1,5], digits=2, nsmall=1)," (", format(lassoOutcome[1,7], digits=2, nsmall=1), ", ", format(lassoOutcome[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseT[1,1], digits=2, nsmall=1)," (", format(lassoStepwiseT[1,3], digits=2, nsmall=1), ", ", format(lassoStepwiseT[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseT[1,5], digits=2, nsmall=1)," (", format(lassoStepwiseT[1,7], digits=2, nsmall=1), ", ", format(lassoStepwiseT[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseY[1,1], digits=2, nsmall=1)," (", format(lassoStepwiseY[1,3], digits=2, nsmall=1), ", ", format(lassoStepwiseY[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseY[1,5], digits=2, nsmall=1)," (", format(lassoStepwiseY[1,7], digits=2, nsmall=1), ", ", format(lassoStepwiseY[1,8], digits=2, nsmall=1), ")")) )
result=cbind(result, temp)
result
########################################
lassoSep=read.table(paste(DIREC, way, "lasso.txt", sep=""),header=T, sep="\t")
lassoSep
########created 7/21/2018
rm(list=ls())
times=c(12)
modelTypeVal=c("lassoOutcome", "lassoSep", "lassoStepwiseT", "lassoStepwiseY",  "allPotent")
############
DIRECRoot="M:/Private/overlap/Application/version4/"
DIREC=paste0(DIRECRoot, "Results/")
result=NULL
way="iptw_"
lassoOutcome=NULL
lassoOutcome=read.table(paste(DIREC, way, "lassoOutcome.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoOutcome=lassoOutcome[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoOutcome=lassoOutcome[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoSep=read.table(paste(DIREC, way, "lasso.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoSep=lassoSep[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoSep=lassoSep[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoStepwiseT=read.table(paste(DIREC, way, "lassoStepT.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoStepwiseT=lassoStepwiseT[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoStepwiseT=lassoStepwiseT[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
lassoStepwiseY=read.table(paste(DIREC, way, "lassoStepY.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
lassoStepwiseY=lassoStepwiseY[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
lassoStepwiseY=lassoStepwiseY[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
allPotent=read.table(paste(DIREC, way, "allPotent.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
allPotent=allPotent[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
allPotent=allPotent[times, c((1:4)+4*0, (1:4)+4*1) ]
}
########################################
stepwise=read.table(paste(DIREC, way, "stepwise.txt", sep=""),header=T, sep="\t")
if(way=="pencomp_"){
stepwise=stepwise[times, c((1:4)+4*3, (1:4)+4*1) ]
} else {
stepwise=stepwise[times, c((1:4)+4*0, (1:4)+4*1) ]
}
temp=rbind(c("&", paste0(format(allPotent[1,1], digits=2, nsmall=1)," (", format(allPotent[1,3], digits=2, nsmall=1), ", ", format(allPotent[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(allPotent[1,5], digits=2, nsmall=1)," (", format(allPotent[1,7], digits=2, nsmall=1), ", ", format(allPotent[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(stepwise[1,1], digits=2, nsmall=1)," (", format(stepwise[1,3], digits=2, nsmall=1), ", ", format(stepwise[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(stepwise[1,5], digits=2, nsmall=1)," (", format(stepwise[1,7], digits=2, nsmall=1), ", ", format(stepwise[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoSep[1,1], digits=2, nsmall=1)," (", format(lassoSep[1,3], digits=2, nsmall=1), ", ", format(lassoSep[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoSep[1,5], digits=2, nsmall=1)," (", format(lassoSep[1,7], digits=2, nsmall=1), ", ", format(lassoSep[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoOutcome[1,1], digits=2, nsmall=1)," (", format(lassoOutcome[1,3], digits=2, nsmall=1), ", ", format(lassoOutcome[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoOutcome[1,5], digits=2, nsmall=1)," (", format(lassoOutcome[1,7], digits=2, nsmall=1), ", ", format(lassoOutcome[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseT[1,1], digits=2, nsmall=1)," (", format(lassoStepwiseT[1,3], digits=2, nsmall=1), ", ", format(lassoStepwiseT[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseT[1,5], digits=2, nsmall=1)," (", format(lassoStepwiseT[1,7], digits=2, nsmall=1), ", ", format(lassoStepwiseT[1,8], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseY[1,1], digits=2, nsmall=1)," (", format(lassoStepwiseY[1,3], digits=2, nsmall=1), ", ", format(lassoStepwiseY[1,4], digits=2, nsmall=1), ")")),
c("&", paste0(format(lassoStepwiseY[1,5], digits=2, nsmall=1)," (", format(lassoStepwiseY[1,7], digits=2, nsmall=1), ", ", format(lassoStepwiseY[1,8], digits=2, nsmall=1), ")")) )
result=cbind(result, temp)
result
lassoSep
lassoOutcome
lassoSep
lassoStepwiseT
lassoStepwiseY
allPotent
stepwise
